两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响：
JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。

名字空间
不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。
减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中 会大大减少全局变量冲突的可能
var myName={};
myName.name="plj"
myName.age="18"

var与let的区别
var定义的变量是在函数中有效果,只要在函数中都可以用.
在函数中定义变量是在函数中有效果,外部访问不到.
function foo() {
    for (var i=0; i<100; i++) {
    }
    i += 100; // 仍然可以引用变量i
}
在for循环等语句块中是无法定义具有局部作用域的变量的

为了在语句块中有效果,所以我们用let来代替
function foo() {
    var sum = 0;
    for (let i=0; i<100; i++) {
        sum += i;
    }
    // SyntaxError:
    i += 1; 
}

解构赋值 减少代码量
//正常情况下
var obj={
    name:'plj',
    age:'24',
    sex:'女'
}
var {name,age,sex}=obj;
console.log(name+","+age+","+sex)
//设置解构赋值的参数名 name:listName
var obj={
    name:'plj',
    list:[{
        name:'zs',
        age:'18'
    }]
}
var {name,list:[{name:listName,age}]}=obj;
console.log(name+listName+age)
//设置默认参数值 避免undefined
var obj={
    name:'plj',
    list:{
        name:'zs',
        age:'18'
    }
}
var {name,list:{name:listName,age},defaults=true}=obj;
console.log(name+listName+age+defaults)

词法作用域就是在你写代码时将变量和块作用域写在哪里来决定，也就是词法作用域是静态的作用域，在你书写代码时就确定了。
