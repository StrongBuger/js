function show(x) {
    console.log(typeof(x));    // undefined
    console.log(typeof(10));   // number
    console.log(typeof('abc')); // string
    console.log(typeof(true));  // boolean

    console.log(typeof(function () { }));  //function

    console.log(typeof([1, 'a', true]));  //object
    console.log(typeof ({ a: 10, b: 20 }));  //object
    console.log(typeof (null));  //object
    console.log(typeof (new Number(10)));  //object
}
//function, json, null, new(开头的类似new Array()/new Number()) 返回的是 object

（undefined, number, string, boolean）属于简单的值类型，不是对象。
剩下的几种情况——函数、数组、对象、null、new Number(10)都是对象,他们都是引用类型。

判断一个变量是不是对象非常简单。值类型的类型判断用typeof，引用类型的类型判断用instanceof。

//判断是否是对象
function isObject(obj){
    if(typeof(obj)=="object" || typeof(obj)=="function"){
       console.log('是对象')
    }else{
       console.log('不是对象')        
    }
}
var str=function(){};
isObject(str)
//对象里面判断具体属于某种类型
console.log([] instanceof Array)
console.log(function(){ } instanceof Function)
console.log(function(){ } instanceof Object)
console.log({} instanceof Object)

一切（引用类型）都是对象，对象是属性的集合。
对象是函数创建的，而函数却又是一种对象
var obj=new Object(); console.log(typeof(obj));//object console.log(typeof(Object));//function

function Fn() { }
Fn.prototype.name = '王福朋';
Fn.prototype.getYear = function () {
    return 1988;
};

var fn = new Fn();
console.log(fn.name);
console.log(fn.getYear());
即，Fn是一个函数，fn对象是从Fn函数new出来的，这样fn对象就可以调用Fn.prototype中的属性。
因为每个对象都有一个隐藏的属性——“proto”，这个属性引用了创建这个对象的函数的prototype。即：fn.proto === Fn.prototype
这里的"proto"成为“隐式原型”

每个函数function都有一个prototype，即原型
每个对象都有一个__proto__，可成为隐式原型

每个对象都有一个__proto__属性，指向创建该对象的函数的prototype。

对象通过函数创建出来
基本函数的_proto_指向Function.prototype
原始函数Function的__proto__指向了自身的Function.prototype
对象的_proto_指向 Function(){}  Function.prototype  Function.prototype也是一个对象所以_proto_指向Object.prototype
例外是Object.prototype的_proto_指向null

Function也是一个函数，函数是一种对象，也有__proto__属性。既然是函数，那么它一定是被Function创建。
所以——Function是被自身创建的。所以它的__proto__指向了自身的Prototype。

javascript中的继承是通过原型链来体现的
访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着__proto__这条链向上找，这就是原型链。
https://github.com/wiliam2015/jsprototype/raw/master/%E7%BB%A7%E6%89%BF/img/2.png
在实际应用中如何区分一个属性到底是基本的还是从原型中找到的呢？大家可能都知道答案了——hasOwnProperty
对象的原型链是沿着__proto__这条线走的，因此在查找f1.hasOwnProperty属性时，就会顺着原型链一直查找到Object.prototype。
由于所有的对象的原型链都会找到Object.prototype，因此所有的对象都会有Object.prototype的方法。这就是所谓的“继承”。
当然这只是一个例子，你可以自定义函数和对象来实现自己的继承。

添加内置方法的原型属性，最好做一步判断，如果该属性不存在，则添加。如果本来就存在，就没必要再添加了

给arr增加求和的自定义扩展方法
var arr=[1,2,3,4,5]
if(typeof Array.prototype.num!=="function"){
    Array.prototype.num=function(arr){
        var num=0;
        for(var i=0;i<arr.length;i++){
            num+=arr[i]
        }
        return num;
    }
}
console.log([].num(arr))

执行上下文

在一段js代码拿过来真正一句一句运行之前，浏览器已经做了一些“准备工作”，其中就包括对变量的声明，而不是赋值。变量赋值是在赋值语句执行的时候进行的。

变量、函数表达式——变量声明，默认赋值为undefined；
this——赋值；
函数声明——赋值；
这三种数据的准备情况我们称之为“执行上下文”或者“执行上下文环境”。

其实，javascript在执行一个代码段之前，都会进行这些“准备工作”来生成执行上下文。这个“代码段”其实分三种情况——全局代码，函数体，eval代码。

函数每被调用一次，都会产生一个新的执行上下文环境。因为不同的调用可能就会有不同的参数。

函数在定义的时候（不是调用的时候），就已经确定了函数体内部自由变量的作用域。

执行上下文环境下一个通俗的定义——在执行代码之前，把将要用到的所有的变量都事先拿出来，有的直接赋值了，有的先用undefined占个空。

this

在函数中this到底取何值，是在函数真正被调用执行的时候确定的，函数定义的时候确定不了。因为this的取值是执行上下文环境的一部分，每次调用函数，都会产生一个新的执行上下文环境。
this 四种情况
1 构造函数
function Foo(){
  console.log(this)
}
var f1=new F00();
this指向f1
直接调用Foo()的话,this指向window
如果函数作为构造函数用，那么其中的this就代表它即将new出来的对象。
2：函数作为对象的一个属性

