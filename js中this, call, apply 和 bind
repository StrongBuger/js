this 具体指向哪个对象是在运行时基于函数的执行环境动态绑定，而非声明时的环境
作为对象的方法调用，this 指向该对象
作为普通函数调用，this 指向全局对象
在严格模式下 this 不会指向全局对象，而是 undefined
作为构造器函数调用，this 指向构造函数new出来的实例
如果构造器显式返回一个 object 类型的对象，new 运算结果最终返回这个对象，而不是 this
如果不显式返回数据，或返回非对象类型的数据，就不会有上面的问题
call 和 apply 可以动态改变传入的 this，能很好体现 JavaScript 的函数式语言特性

this 指向
普通函数指向 window
作为对象方法的调用 指向对象
作为构造函数调用  this就指这个构造出来的对象
apply,call 调用
apply()是函数的一个方法，作用是改变函数的调用对象。
它的第一个参数就表示改变后的调用这个函数的对象。因此，这时this指的就是这第一个参数。
apply()的参数为空时，默认调用全局对象

this的指向是在调用的时候确定的.

call是每个函数都有的,call允许你在调用的时候为函数指定一个上下文

A.call(B) 改变A的指向为B
传递给它的第一个参数会作为函数被调用时的上下文。换句话说，this 将会指向传递给 call 的第一个参数。
A.call(B,a,b,c,d)
A.apply(B,[a,b,c,d])
.bind
.bind 和 .call 完全相同，除了不会立刻调用函数，而是返回一个能以后调用的新函数.
例子:
function a(){
    console.log(`${this.name}`+'123')
}
var b={
    'name':'zs',
    'age':'64'
}
var c=a.bind(b);
c()

当我在函数内部看到 this 关键字时，这些就是我为了判断它的引用而采取的步骤。

查看函数在哪被调用。
点左侧有没有对象？如果有，它就是 “this” 的引用。如果没有，继续第 3 步。
该函数是不是用 “call”、“apply” 或者 “bind” 调用的？如果是，它会显式地指明 “this” 的引用。如果不是，继续第 4 步。
该函数是不是用 “new” 调用的？如果是，“this” 指向的就是 JavaScript 解释器新创建的对象。如果不是，继续第 5 步。
是否在“严格模式”下？如果是，“this” 就是 undefined，如果不是，继续第 6 步。
JavaScript 很奇怪，“this” 会指向 “window” 对象。




