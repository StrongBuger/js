前端模块化，主要是解决两个问题——“命名空间冲突”，“文件依赖管理”
模块化编程示例
var module=(function(){
    var count=0;
    var m1=function(){
       console.log('m1')
    };
    var m2=function(){
       console.log('m2')
    }
    return{
       'm1':m1,
       'm2':m2
    }
})()
var module=(function(mod){
   mod.m3=function(){
      console.log('m3')
   }
   return mod;
})(window.module||{})
//引用别的模块的话例如jQuery
var module=(function(mod,$){
   mod.m3=function(){
      console.log('m3')
   }
   return mod;
})(window.module||{},jQuery)
module.m1()
module.m2()
module.m3()

立即执行函数
(function(){})()
包含function(){}函数的括号的作用,都是把function(){}转化成一个可执行的表达式，方便执行。
如果去掉该括号，则会报错。因为单纯的function(){}不是可执行的表达式，会直接报错。
第二个括号就很简单了，就是执行表达式了。

需要注意的点：(立即执行函数编程)
 1.IIFE的头部，都要先进行检查命名空间是否已经实例化，如果还没实例化，则进行实例化。
 2.IIFE的尾部，都要return命名空间的引用，使后续代码能够得到最新的wall命名空间内容。
(function(window, WALL, undefined){
    // 给wall命名空间绑定方法say
    WALL.say = function(){
        console.log('hello');
    }
})(window, window.wall || (window.wall = {}));

(function(window, WALL, undefined){
    // 给wall命名空间绑定方法 whoIam
    WALL.whoIam = function(){
        console.log('wall');
    }
})(window, window.wall || (window.wall = {}));

// 调用
wall.say();
wall.whoIam();

闭包(内部函数可以引用外部定义的变量)
闭包允许内层函数引用父函数中的变量，但是该变量是最终值
var lists = document.getElementsByTagName('li');  
for(var i = 0 , len = lists.length ; i < len ; i++){  
    lists[ i ].onmouseover = function(){  
        alert(i);      
    };  
}
你会发现当鼠标移过每一个元素时，总是弹出4，而不是我们期待的元素下标。这是为什么呢？注意事项里已经讲了（最终值）。显然这种解释过于简单，当mouseover事件调用监听函数时，首先在匿名函数（ function(){ alert(i); }）内部查找是否定义了 i，结果是没有定义；因此它会向上查找，查找结果是已经定义了，并且i的值是4（循环后的i值）；所以，最终每次弹出的都是4。

//模块化开发
var module1 = (function(mod){
    var privateName = 'inner1';
    var privateFunc = function(){
        console.log('私有函数1')
    }

    return {
        name : 'rouwan1',
        sayName: function(){
            console.log(this.name)
        },
        anotherName:mod.name,            //另一个模块上的公有参数
        sayAnotherName:mod.sayName       //另一个模块上的公有方法
    }

})(anotherModule)                        //引入了另一个模块
//使用
module1.sayOtherName()
